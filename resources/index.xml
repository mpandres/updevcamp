<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources on UP CSI Devcamp</title>
    <link>/resources/</link>
    <description>Recent content in Resources on UP CSI Devcamp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Oct 2015 16:40:50 +0800</lastBuildDate>
    <atom:link href="/resources/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python Tutorial</title>
      <link>/resources/python/</link>
      <pubDate>Wed, 21 Oct 2015 16:40:50 +0800</pubDate>
      
      <guid>/resources/python/</guid>
      <description>

&lt;h2 id=&#34;how-to-download:c431704424a149541be05f7b70c63362&#34;&gt;How to Download&lt;/h2&gt;

&lt;p&gt;For the purposes of this tutorial, we will be using Python 3. To download the installer for Python, visit &lt;a href=&#34;https://www.python.org/downloads/release/python-343/&#34;&gt;https://www.python.org/downloads/release/python-343/&lt;/a&gt; and scroll to the bottom of the page.&lt;/p&gt;

&lt;p&gt;For Windows and Mac OS users simply identify if your OS is 32 or 64 bit and download the appropriate installer. For Linux users, click on the XZ compressed source tarball, as that is the one that has installation instructions in this document.&lt;/p&gt;

&lt;h2 id=&#34;how-to-install:c431704424a149541be05f7b70c63362&#34;&gt;How to Install&lt;/h2&gt;

&lt;p&gt;For Windows users, simply run the executable file and just keep on clicking “Next”, then wait for it to finish installing. After installing, we have to set the PATH of your OS to be able to run Python from the command prompt.&lt;/p&gt;

&lt;h3 id=&#34;setting-path-on-windows:c431704424a149541be05f7b70c63362&#34;&gt;Setting Path on Windows&lt;/h3&gt;

&lt;p&gt;Taken from &lt;a href=&#34;https://java.com/en/download/help/path.xml&#34;&gt;https://java.com/en/download/help/path.xml&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;windows-8:c431704424a149541be05f7b70c63362&#34;&gt;Windows 8&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Drag the Mouse pointer to the Right bottom corner of the screen&lt;/li&gt;
&lt;li&gt;Click on the Search icon and type: Control Panel&lt;/li&gt;
&lt;li&gt;Click on -&amp;gt; Control Panel -&amp;gt; System -&amp;gt; Advanced&lt;/li&gt;
&lt;li&gt;Click on Environment Variables, under System Variables, find PATH, and click on it.&lt;/li&gt;
&lt;li&gt;In the Edit windows, modify PATH by adding the directory of your Python installation, which is C:\Python34 by default.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;windows-7:c431704424a149541be05f7b70c63362&#34;&gt;Windows 7&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Select Computer from the Start menu&lt;/li&gt;
&lt;li&gt;Choose System Properties from the context menu&lt;/li&gt;
&lt;li&gt;Click Advanced system settings &amp;gt; Advanced tab&lt;/li&gt;
&lt;li&gt;Click on Environment Variables, under System Variables, find PATH, and click on it.&lt;/li&gt;
&lt;li&gt;In the Edit windows, modify PATH by adding the directory of your Python installation, which is C:\Python34 by default.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;windows-xp:c431704424a149541be05f7b70c63362&#34;&gt;Windows XP&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Start -&amp;gt; Control Panel -&amp;gt; System -&amp;gt; Advanced&lt;/li&gt;
&lt;li&gt;Click on Environment Variables, under System Variables, find PATH, and click on it.&lt;/li&gt;
&lt;li&gt;In the Edit windows, modify PATH by adding the directory of your Python installation, which is C:\Python34 by default.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;windows-vista:c431704424a149541be05f7b70c63362&#34;&gt;Windows Vista&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Right click My Computer icon&lt;/li&gt;
&lt;li&gt;Choose Properties from the context menu&lt;/li&gt;
&lt;li&gt;Click Advanced tab (Advanced system settings link in Vista)&lt;/li&gt;
&lt;li&gt;In the Edit windows, modify PATH by adding the directory of your Python installation, which is C:\Python34 by default.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;linux:c431704424a149541be05f7b70c63362&#34;&gt;Linux&lt;/h4&gt;

&lt;p&gt;For Linux users, simply extract the tarball to a folder, then run the following in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure

make

make test

sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards, open the command prompt/terminal and type “python”. You should see something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Python 3.4.3 (default, Jul 28 2015, 18:20:59) 
[GCC 4.8.4] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
\&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, then congratulations. You have successfully installed Python in your computer.&lt;/p&gt;

&lt;h2 id=&#34;basics:c431704424a149541be05f7b70c63362&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Now that we have Python in our computer, we can get started with the actual coding. Let us start off with the most basic of basics, printing to the command prompt. Open up any text editor and type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  print(“Hello World”)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now save it as sample.py.&lt;/p&gt;

&lt;p&gt;To run python code, we must type “python filename” in the command prompt, where “filename” is the name of the file containing python code, which in this case is “sample.py”. Thus, let us type “python sample.py”. It should display&lt;/p&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;p&gt;Congratulations, you have just made your first python program.&lt;/p&gt;

&lt;p&gt;Now let us make things a little bit harder.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say I wish to make it so that it will print “Hello World” how many times the user wants. This would involve multiple things: reading input, storing that value in a variable, and looping the print statement that number of times.&lt;/p&gt;

&lt;p&gt;Frist things first, getting input from the user. To do this, we can use the input() function like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  iter = input(“How many times to print? “)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shall prompt the user to input a number, which would be stored in the iter variable. But wait, there&amp;rsquo;s something wrong here. The input function returns a string, which is different from a number. So we must first convert the string inputted by the user to a number before doing anything else.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  iter = int(input(“How many times to print? “))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are sure that whatever the user inputs, Python will convert it into an integer. You may have noticed that, unlike in C, we have not initialized the iter variable. This is because in Python, variable types are not explicitly determined, meaning the variable will be whatever data it contains be it an integer, string, float, and the like. So something like this in C&lt;/p&gt;

&lt;p&gt;int iter = 0;&lt;/p&gt;

&lt;p&gt;Is equal to this in Python&lt;/p&gt;

&lt;p&gt;iter = 0&lt;/p&gt;

&lt;p&gt;Now let us do the looping part. We can use the for loop to loop a variable in a certain range, usually specified by the range() function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  for x in range(0,iter):
    print(“Hello World”)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the range started from 0, and not 1. This is because, in the range function, the lower boundary, in this case 0, is inclusive, while the upper boundary, iter, is exclusive. We can see this by printing the current value of x alongside “Hello World”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  for x in range(0,iter):
    print(“Hello World ”, x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that indentation in Python is not optional. This code will not work if we do not use proper indentations. Here, we can see that in for loops, everything inside the for loop must be indented. In addition to this, for loops also end in “:” to identify that the next line should be indented.&lt;/p&gt;

&lt;p&gt;Now, run the program like we did previously and now it should prompt you for an input&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  How many times to print?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let us print “Hello World” five times.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  How many times to print? 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it will display this&lt;/p&gt;

&lt;p&gt;Hello World 0&lt;/p&gt;

&lt;p&gt;Hello World 1&lt;/p&gt;

&lt;p&gt;Hello World 2&lt;/p&gt;

&lt;p&gt;Hello World 3&lt;/p&gt;

&lt;p&gt;Hello World 4&lt;/p&gt;

&lt;p&gt;Ok. Now let us say that instead of printing “Hello World” each time, I wish to alternately print “Hello” and “Hi”. To do this, we must, at every iteration, check if the current iteration is even or odd, since obviously even and odd numbers alternate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  for x in range(0,iter):
    # the `%` (modulo) operator takes the remainder in a division operation
    if(x % 2 == 0): 
      print(“Hello”)
    elif(x % 2 != 0):
      print(“Hi”)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have encountered a lot of new stuff here, so let us take them one by one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   if(x % 2 == 0):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is called the if statement. This evaluates whatever condition is inside its parentheses and proceeds to do the lines underneath it if it evaluates to True, while skipping all other elifs which you will see later. If the condition does not evaluate to True, then it simply skips the indented block and finds the next line that matches its indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    elif(x % 2 != 0):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also an if statement, but the difference between “elif” and  “if” is that elif requires a previous if statement; the program will not run otherwise. Aside from that, however, it functions identically to if statements as discussed above.&lt;/p&gt;

&lt;p&gt;Now to start with arrays. In Python we call “arrays” “lists”, which are just basically heterogeneous arrays. These are defined by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr = [1, 2, “Hello World”]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we defined a list called arr which contains the integers 1 and 2, and the string “Hello World”. To access an element in the list, we simply use its index, like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which returns&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do take note that lists in Python use zero-based numbering. This means that the index of the first element in a list is 0, then the index of the second element is 1, and so on. This also works the other way around, with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	arr[-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returning&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	“Hello World”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It basically is shorthand for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr[len(arr) – 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where len(x) returns the length of x, whether it be a list, string, tuple, etc. One could also return sub-arrays of the list by defining a range of indexes instead. For example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  arr[1:2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would result in&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  [2, “Hello World”]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the range is inclusive, with all indexes between 1 and 2 inclusive being outputted.&lt;/p&gt;

&lt;p&gt;There are numerous built-in functions for list manipulation in Python, but we shall only tackle the basics.&lt;/p&gt;

&lt;p&gt;To append to lists&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  arr.append(element)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inserting&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  arr.insert(index, element)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which would move all other elements to the right&lt;/p&gt;

&lt;p&gt;Deletion&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  del arr[index]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would remove the element with that index from the list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  arr.pop(index)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would remove the element with that index and return it. If no index is given, it would automatically remove the last element in the list and returns it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  arr.remove(element)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would remove the first element that corresponds to that element&lt;/p&gt;

&lt;p&gt;For further information about these, visit &lt;a href=&#34;https://docs.python.org/3.4/tutorial/datastructures.html&#34;&gt;https://docs.python.org/3.4/tutorial/datastructures.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us tackle functions. All Python functions follow the following syntax&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def name(parameters):
  #function code
  #function code
  #function code
#this code is not part of the function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, similar to if statements and for loops, function declarations need a colon at the end. In addition to this, all lines of code belonging to that function are indented at the same level, with the first line with less than the required indentation marking the end of the function.&lt;/p&gt;

&lt;p&gt;To call this function, simply put&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  name(parameters)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which would now call the function, passing the parameters to the function. Note that the parameters are passed by reference. Meaning that any changes made to the parameter passed inside the function would also affect the same variable outside it, even if the variable&amp;rsquo;s value was not explicitly returned.&lt;/p&gt;

&lt;p&gt;Lastly, before we move on to actual examples of code, let us briefly tackle how to import in Python. To import other Python files, the following line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  import file.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where file.py is whatever file you wish to import. Using this, you can use functionalities that can be found in the provided Python modules to make life easier. One could also import their own files, allowing them the option to neatly package their functions into files for possibly future use.&lt;/p&gt;

&lt;p&gt;With these in mind, you can now start coding in Python. Good for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Ruby on Rails</title>
      <link>/resources/learn_ruby_on_rails/</link>
      <pubDate>Tue, 10 Feb 2015 02:11:02 +0800</pubDate>
      
      <guid>/resources/learn_ruby_on_rails/</guid>
      <description>

&lt;p&gt;This guide is for everyone who wants to learn &lt;a href=&#34;http://www.rubyonrails.org&#34;&gt;Ruby on Rails&lt;/a&gt;. sqlite3 is the suggested database management system in this guide. Moreover, this will include our recommended environment and links for the most reliable and best tutorials on web.&lt;/p&gt;

&lt;h2 id=&#34;linux:239628dc10fde8046da4a69f3f935a4a&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Supported Distributions&lt;/strong&gt;
1. Ubuntu (Precise Pangolin and Trusty Tahr)
2. ElementaryOS (Luna)
3. Linux Mint (Cinnamon)&lt;/p&gt;

&lt;h4 id=&#34;dependencies:239628dc10fde8046da4a69f3f935a4a&#34;&gt;Dependencies&lt;/h4&gt;

&lt;p&gt;Install the following dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;sqlite3&lt;/li&gt;
&lt;li&gt;nodeJs&lt;/li&gt;
&lt;li&gt;Rbenv&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Rails&lt;/li&gt;
&lt;li&gt;Bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install &lt;strong&gt;git&lt;/strong&gt;, &lt;strong&gt;sqlite3&lt;/strong&gt;, &lt;strong&gt;nodeJS&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev
sudo apt-get install libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev
sudo apt-get install libgdbm3 libgdbm-dev
sudo apt-get install sqlite3 libsqlite3-dev
sudo apt-get install git nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a recommended &lt;strong&gt;nodeJS&lt;/strong&gt; installation, check &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;NVM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: If this is your first time on git, it&amp;rsquo;s advisable to configure your credentials first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global user.name &amp;quot;Neil Calabroso&amp;quot;
git config --global user.email &amp;quot;nmcalabroso@up.edu.ph&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, make sure your git&amp;rsquo;s core.autocrlf setting is set to false to avoid any problems when installing rbenv.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global core.autocrlf false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;Rbenv&lt;/a&gt;. Complete the installation instructions including the optional part:&lt;code&gt;ruby-build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Upon installing &lt;strong&gt;Rbenv&lt;/strong&gt;, restart your terminal and install Ruby 2.2.0:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rbenv install 2.2.0
rbenv global 2.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install &lt;strong&gt;Rails&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install rails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Bundler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install bundler #restart terminal after the installation
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tutorials:239628dc10fde8046da4a69f3f935a4a&#34;&gt;Tutorials&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you do not have any experience on ruby, we suggest to complete the challenge by &lt;a href=&#34;http://www.tryruby.org&#34;&gt;TryRuby&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;With the set-up above, you are now ready for your &lt;a href=&#34;http://guides.rubyonrails.org/getting_started.html&#34;&gt;first web app tutorial&lt;/a&gt;. You can now start at &lt;em&gt;section 3.2&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Since the &lt;a href=&#34;http://www.guides.rubyonrails.org/getting_started.html&#34;&gt;Getting Started Tutorial&lt;/a&gt; is too high-level (with the use of scaffolding), it is very much suggested to read and finish the book &lt;a href=&#34;http://www.rubyonrailstutorial.org/book&#34;&gt;Ruby on Rails Tutorial&lt;/a&gt;. This book gives a thorough explanation about the workflow of &lt;strong&gt;Rails&lt;/strong&gt;, &lt;strong&gt;Unit-testing&lt;/strong&gt;, &lt;strong&gt;Git&lt;/strong&gt;, and &lt;strong&gt;Deployment&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-notes:239628dc10fde8046da4a69f3f935a4a&#34;&gt;Further Notes&lt;/h3&gt;

&lt;p&gt;For a high quality and readable codebase, please make these conventions as references:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/ruby-style-guide&#34;&gt;Ruby Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/rails-style-guide&#34;&gt;Rails Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Linux Installation Guide</title>
      <link>/resources/linux_installation/</link>
      <pubDate>Sun, 08 Feb 2015 16:20:02 +0800</pubDate>
      
      <guid>/resources/linux_installation/</guid>
      <description>

&lt;p&gt;This is a step-by-step guide for installing Linux on your machine via dual boot.&lt;/p&gt;

&lt;h2 id=&#34;create-the-installation-disk:edafce778e50c51636ce6db385732fc7&#34;&gt;Create the Installation Disk&lt;/h2&gt;

&lt;h3 id=&#34;download-your-preferred-linux-distro:edafce778e50c51636ce6db385732fc7&#34;&gt;Download Your Preferred Linux Distro&lt;/h3&gt;

&lt;p&gt;Download the ISO file from the webpage of your preferred Linux distribution. Take note of the system requirements, and download the one appropriate for your machine.&lt;/p&gt;

&lt;p&gt;Here are the download sites for some of the distributions:
* &lt;a href=&#34;http://www.ubuntu.com/download&#34;&gt;Ubuntu&lt;/a&gt;
* &lt;a href=&#34;http://www.linuxmint.com/download.php&#34;&gt;Linux Mint&lt;/a&gt;
* &lt;a href=&#34;http://elementaryos.org&#34;&gt;elementary OS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are installing alongside Windows 8, you would need the 64-bit version in order to install correctly in EFI mode.&lt;/p&gt;

&lt;h3 id=&#34;transfer-the-iso-file-to-your-installation-media:edafce778e50c51636ce6db385732fc7&#34;&gt;Transfer the ISO file to Your Installation Media&lt;/h3&gt;

&lt;p&gt;You can either burn the ISO file on a blank CD or create a bootable USB on a spare USB with enough memory (~2GB). Ubuntu comes with its own application for creating the installation disk called Startup Disk Creator.&lt;/p&gt;

&lt;h2 id=&#34;install-a-boot-manager-for-mac-os:edafce778e50c51636ce6db385732fc7&#34;&gt;Install a Boot Manager (for Mac OS)&lt;/h2&gt;

&lt;p&gt;For Mac OS users, rEFind is a boot manager that allows you to choose which operating system to start your machine with. You can download rEFind &lt;a href=&#34;http://sourceforge.net/projects/refind/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After downloading, open a Terminal window and go to the directory where you downloaded rEFind. Run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the rEFind boot manager on your Mac OS.&lt;/p&gt;

&lt;p&gt;Note: Windows users need not download a new boot manager.&lt;/p&gt;

&lt;h2 id=&#34;partitioning:edafce778e50c51636ce6db385732fc7&#34;&gt;Partitioning&lt;/h2&gt;

&lt;p&gt;We need to allocate some space to make room for your Linux system. We will need two partitions: one for the root (this contains the kernel, boot files, system files, etc.), and one for the swap area (the memory used for hibernation and also when the RAM is full).&lt;/p&gt;

&lt;p&gt;For the root, allocate at least 20 GB.&lt;/p&gt;

&lt;p&gt;For the swap area, allocate around twice the size of your RAM.&lt;/p&gt;

&lt;p&gt;Important Note: Be careful which paritions you are shrinking. Make sure that you select the partition of your hard drive or a partition with lots of space. DO NOT touch the boot manager or any of the important partitions. Remember to backup your files in case something goes wrong.&lt;/p&gt;

&lt;h3 id=&#34;mac-os:edafce778e50c51636ce6db385732fc7&#34;&gt;Mac OS&lt;/h3&gt;

&lt;p&gt;In Mac OS, you can partition using Disk Utility.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the Partition tab on top. The Volume Scheme (left rectangle) shows the partitions in your machine. The ones shaded in blue represents the space already taken up by your machine, while the ones in white are the free space you can use.&lt;/li&gt;
&lt;li&gt;You can add a partition by clicking the plus sign below the Volume Scheme. This will add another partition (another box) in the Volume Scheme. Click this new box and change the name, format, and size of the partition.&lt;/li&gt;
&lt;li&gt;Once you&amp;rsquo;ve created the necessary partitions, click the Apply buttom on the bottom right and then select Partition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a more detailed guide on how to parition on a Mac, click &lt;a href=&#34;http://www.geek.com/apple/how-to-partition-a-mac-hard-drive-1482555/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;windows:edafce778e50c51636ce6db385732fc7&#34;&gt;Windows&lt;/h3&gt;

&lt;p&gt;In Windows, you can use Disk Management from the Computer Management utility.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should see a list of paritions (volumes) available in your machine. Right-click the volume you want to shrink and select &amp;ldquo;Shrink Volume&amp;hellip;&amp;rdquo; from the menu.&lt;/li&gt;
&lt;li&gt;In the shrink dialog, enter the amount of the new partition. If there is not enough space to in the volume and there&amp;rsquo;s free space right beside it, you can choose the &amp;ldquo;Extend Volume&amp;hellip;&amp;rdquo; option to add more space. Note that this only works with contiguous space.&lt;/li&gt;
&lt;li&gt;You should now see a box of Unallocated Space. Right click on this and select &amp;ldquo;New Simple Volume&amp;hellip;&amp;rdquo; to create a partition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a more detailed guide on how to parition on Windows, click &lt;a href=&#34;http://www.howtogeek.com/172580/how-to-create-a-separate-data-partition-for-windows/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installing-linux:edafce778e50c51636ce6db385732fc7&#34;&gt;Installing Linux&lt;/h2&gt;

&lt;h3 id=&#34;efi-mode:edafce778e50c51636ce6db385732fc7&#34;&gt;EFI Mode&lt;/h3&gt;

&lt;p&gt;UEFI (~EFI) is a firmware interface that has replaced the BIOS firmware in recent computers. When installing alongside Windows 8, you would need to disable a few features so that you can properly install in EFI mode.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, &lt;a href=&#34;http://www.eightforums.com/tutorials/6320-fast-startup-turn-off-windows-8-a.html&#34;&gt;disable FastStartup&lt;/a&gt; in Windows. After disabling the feature, make sure that you shutdown Windows properly so that it doesn&amp;rsquo;t save the state of your machine.&lt;/li&gt;
&lt;li&gt;In the BIOS, disable FastBoot. If you run into any problems while installing, try disbaling Secure Boot as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please follow the &lt;a href=&#34;https://help.ubuntu.com/community/UEFI&#34;&gt;official guide&lt;/a&gt; for installing Ubuntu in EFI mode before proceeding with the next instructions. For troubleshooting, you may find additional (more detailed) instructions &lt;a href=&#34;http://askubuntu.com/questions/221835/installing-ubuntu-on-a-pre-installed-windows-8-64-bit-system-uefi-supported&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;booting-the-installation-disk:edafce778e50c51636ce6db385732fc7&#34;&gt;Booting the Installation Disk&lt;/h3&gt;

&lt;p&gt;In order to install Linux, you must first boot your computer from the installation disk. Depending on the hardware, this process may differ between machines. However, the general process is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Insert the installation disk and then restart your machine.&lt;/li&gt;
&lt;li&gt;Before the machine loads the pre-installed OS, press the appropriate function key to change the boot order. This is usually F12 or ESC for PC users and Option for Mac users, but it generally differs depending on the hardware so be sure to check which function key works for your machine.&lt;/li&gt;
&lt;li&gt;Select the appropriate boot disk. If you choose the incorrect device, your machine will continue to boot as normal. Just restart and try again. If you are successful, your machine will proceed to the Installation Wizard of your Linux distro.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow the instructions until you are asked how you would like to install your Linux system. You will usually be presented with three options: &amp;ldquo;Replace Your Existing OS&amp;rdquo;, &amp;ldquo;Install Alongside Your OS&amp;rdquo;, or &amp;ldquo;Something Else&amp;rdquo;. Select the &amp;ldquo;Something Else&amp;rdquo; option.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-partitions:edafce778e50c51636ce6db385732fc7&#34;&gt;Setting Up the Partitions&lt;/h3&gt;

&lt;p&gt;Select the partitions you created before.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the root partition, choose to use it as an Ext4 journaling file system and select &lt;code&gt;/&lt;/code&gt; as its mounting point.&lt;/li&gt;
&lt;li&gt;For the swap partition, choose to use it as a swap area.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a more detailed guide for setting up the partitions &lt;a href=&#34;http://askubuntu.com/questions/343268/how-to-use-manual-partitioning-during-installation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards, follow the remaining instructions for setting up and installing Linux. Then restart your machine.&lt;/p&gt;

&lt;h2 id=&#34;network-configuration:edafce778e50c51636ce6db385732fc7&#34;&gt;Network Configuration&lt;/h2&gt;

&lt;p&gt;Check if your machine detects wireless networks. If not, connect to the internet via wired connection (such as ethernet) and download the Broadcom STA driver. In elementary OS, you can do this by accessing System Settings &amp;gt; Additional Drivers.&lt;/p&gt;

&lt;h2 id=&#34;update-your-system:edafce778e50c51636ce6db385732fc7&#34;&gt;Update Your System&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installing pry in Rails 4</title>
      <link>/resources/pry_for_rails_linux/</link>
      <pubDate>Mon, 19 Jan 2015 08:49:02 +0800</pubDate>
      
      <guid>/resources/pry_for_rails_linux/</guid>
      <description>

&lt;p&gt;This guide aims to install &lt;a href=&#34;https://github.com/pry/pry&#34;&gt;pry&lt;/a&gt; in your Rails 4 App.
This tutorial also fixes the &lt;em&gt;&amp;ldquo;no such file to load &amp;ndash; readline&amp;rdquo;&lt;/em&gt; error when
running &lt;strong&gt;binding.pry&lt;/strong&gt; or even &lt;strong&gt;rails console&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, add the following gems to your Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development, :test do
  gem &#39;rb-readline&#39;
  gem &#39;pry&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example:e83c339c047e4d38b7a0a649ff234c18&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UsersController &amp;lt; ApplicationController
  def index
    @users = User.all
    binding.pry
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;further-notes:e83c339c047e4d38b7a0a649ff234c18&#34;&gt;Further Notes&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/pry/pry&#34;&gt;pry&lt;/a&gt;&amp;rsquo;s main repository for more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Development Tools</title>
      <link>/resources/development_tools/</link>
      <pubDate>Mon, 19 Jan 2015 08:34:02 +0800</pubDate>
      
      <guid>/resources/development_tools/</guid>
      <description>

&lt;p&gt;Here are the recommended development tools of the Development Committee.&lt;/p&gt;

&lt;h2 id=&#34;linux:025ccdd47de7f4bb3ef3ca638ca3be0e&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Supported Distributions&lt;/strong&gt;
1. Ubuntu (Precise Pangolin)
2. ElementaryOS (Luna)
3. Linux Mint (Cinnamon)&lt;/p&gt;

&lt;p&gt;Before installing, please make sure to update and upgrade your system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;firefox:025ccdd47de7f4bb3ef3ca638ca3be0e&#34;&gt;Firefox&lt;/h3&gt;

&lt;p&gt;To install Firefox, input the following via terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install firefox
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;google-chrome:025ccdd47de7f4bb3ef3ca638ca3be0e&#34;&gt;Google Chrome&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;
1. Download the &lt;a href=&#34;https://www.google.com/chrome/browser/desktop&#34;&gt;package&lt;/a&gt;.
2. Open the downloaded package using the Software Center app.
3. Within the app, you can now install Google Chrome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plug-ins&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For testing your own API service, you can check &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en&#34;&gt;Postman&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For picking colors from websites, you can check &lt;a href=&#34;https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg?hl=en&#34;&gt;ColorPick Eyedropper&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;sublime-text-3:025ccdd47de7f4bb3ef3ca638ca3be0e&#34;&gt;Sublime Text 3&lt;/h3&gt;

&lt;p&gt;To install Sublime Text 3, input the following via terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo add-apt-repository ppa:webupd8team/sublime-text-3
sudo apt-get update
sudo apt-get install sublime-text-installer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congrats! Now you have Sublime Text 3 installed in your machine.&lt;/p&gt;

&lt;p&gt;Customize your editor for more uniform environment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Sublime&amp;rsquo;s package manager. Instructions can be found here: &lt;code&gt;https://sublime.wbond.net/installation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open SublimeText 3, select &lt;code&gt;Package Control:Install Package&lt;/code&gt; (shortcut: CTRL+SHIFT+P)&lt;/li&gt;
&lt;li&gt;Search and install &lt;code&gt;Theme - Soda SolarizedDark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open Preferences &amp;gt; Settings - User and activate the theme, color scheme, and indent using spaces with this configuration:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;tab_size&amp;quot;: 2,
  &amp;quot;translate_tabs_to_spaces&amp;quot;: true,
  &amp;quot;detect_indentation&amp;quot;: false,
  &amp;quot;color_scheme&amp;quot;: &amp;quot;Packages/Color Scheme - Default/Solarized (Dark).tmTheme&amp;quot;,
  &amp;quot;theme&amp;quot;: &amp;quot;Soda SolarizedDark.sublime-theme&amp;quot;,
  &amp;quot;ignored_packages&amp;quot;:
  [
    &amp;quot;Vintage&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, restart Sublime Text.&lt;/p&gt;

&lt;h3 id=&#34;atom:025ccdd47de7f4bb3ef3ca638ca3be0e&#34;&gt;Atom&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;
1. Download the &lt;a href=&#34;https://atom.io&#34;&gt;package&lt;/a&gt;.
2. Open the downloaded package using the Software Center app.
3. Within the app, you can now install Atom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt;
1. Run Atom.
2. Go to &lt;code&gt;Settings&lt;/code&gt;. (shortcut: Ctrl + ,)
3. Go to &lt;code&gt;Themes&lt;/code&gt; tab. Search and install &lt;code&gt;Solarized Dark UI&lt;/code&gt;.
4. Set your theme and syntax to &lt;code&gt;Solarized Dark&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;git:025ccdd47de7f4bb3ef3ca638ca3be0e&#34;&gt;Git&lt;/h3&gt;

&lt;p&gt;To install git, input the following via terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a MEAN stack</title>
      <link>/resources/setting_up_mean/</link>
      <pubDate>Sat, 11 Oct 2014 16:26:02 +0800</pubDate>
      
      <guid>/resources/setting_up_mean/</guid>
      <description>

&lt;p&gt;This guide is for everyone who wants to setup a MEAN stack on their development machine.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;MEAN&lt;/strong&gt; stack is a full stack javascript framework that includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;ongoDB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;xpress&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;ngularJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;odeJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Everything in MEAN (MongoDB, Express, AngularJS, Node) is open source!&lt;/p&gt;

&lt;h2 id=&#34;mean-dependencies:ff38e5c10e88715766a195f490595a14&#34;&gt;MEAN Dependencies&lt;/h2&gt;

&lt;h3 id=&#34;nodejs:ff38e5c10e88715766a195f490595a14&#34;&gt;NodeJS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; is a platform built on top of V8 for easily building fast network applications.&lt;/p&gt;

&lt;p&gt;While you can install node by its own and work from there, we highly encourage to use a node manager such as nvm or nodeenv. For this tutorial we will be installing nvm.&lt;/p&gt;

&lt;p&gt;To install nvm, run this on the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/creationix/nvm/v0.17.2/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Windows, use a bash emulator such as Git bash to run the command above.&lt;/p&gt;

&lt;p&gt;NVM is a bash script that allows you to install multiple active node.js versions. Let&amp;rsquo;s create our first node version by running the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then use the version by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm use 0.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Learn more about &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn how to develop in node through &lt;a href=&#34;http://nodeschool.io/&#34;&gt;NodeSchool&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mongodb:ff38e5c10e88715766a195f490595a14&#34;&gt;MongoDB&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;mongodb.org&#34;&gt;MongoDB&lt;/a&gt; is the leading NoSQL database.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MacOSX:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Install mongodb through &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update
brew install mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Ubuntu:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
echo &#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39; | sudo tee /etc/apt/sources.list.d/mongodb.list
sudo apt-get update
sudo apt-get install -y mongodb-org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Windows:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to install MongoDB on windows is through MongoDB&amp;rsquo;s &lt;a href=&#34;http://www.mongodb.org/downloads?_ga=1.239857990.455166030.1413041895&#34;&gt;binary distributions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We suggest that you try out Mongodb&amp;rsquo;s shell&amp;rsquo;s &lt;a href=&#34;http://try.mongodb.org/?_ga=1.110782533.172777486.1413039191&#34;&gt;online tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;angularjs-and-express:ff38e5c10e88715766a195f490595a14&#34;&gt;AngularJS and Express&lt;/h3&gt;

&lt;p&gt;AngularJS and Express are frameworks of their own. This means that they are not system dependencies, but simply imported into your application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AngularJS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; is a front-end MVW (model-view-whatever) web framework. It&amp;rsquo;s main philosophy aims to adapt and extend HTML to better serve dynamic content (dynamic HTML).&lt;/p&gt;

&lt;p&gt;This can be very tricky to understand if you come from a jQuery background. &lt;a href=&#34;http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background&#34;&gt;This StackOverflow Question might help out.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Express&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt; is a minimal and flexible Node.js backend web application framework.&lt;/p&gt;

&lt;p&gt;Try Express&amp;rsquo; &lt;a href=&#34;http://expressjs.com/guide.html&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;making-it-all-work-together:ff38e5c10e88715766a195f490595a14&#34;&gt;Making it All Work Together&lt;/h2&gt;

&lt;p&gt;MEAN is a &lt;em&gt;collection&lt;/em&gt; of different javascript based technologies to develop web applications. As such, &amp;ldquo;MEAN&amp;rdquo; is not a single, framework/stack/technology that can just be worked on top of.&lt;/p&gt;

&lt;h3 id=&#34;bare-build:ff38e5c10e88715766a195f490595a14&#34;&gt;Bare build:&lt;/h3&gt;

&lt;p&gt;It would be beneficial, as a learning experience, to create a bare build of MEAN by your own.&lt;/p&gt;

&lt;p&gt;If you have experience in other web technologies, just remember that:
* MongoDB =&amp;gt; database             &lt;em&gt;(MySQL, Postgres)&lt;/em&gt;
* Express =&amp;gt; backend framework    &lt;em&gt;(Laravel, Rails, Django)&lt;/em&gt;
* AngularJS =&amp;gt; frontend framework &lt;em&gt;(JQuery, Backbone)&lt;/em&gt;
* NodeJS =&amp;gt; runtime environment   &lt;em&gt;(PHP, Ruby, Python)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Therefore, you need to run your database, use your frameworks (Express, Angular), and then let Node interpret.&lt;/p&gt;

&lt;h3 id=&#34;prebuilt-mean:ff38e5c10e88715766a195f490595a14&#34;&gt;Prebuilt MEAN:&lt;/h3&gt;

&lt;p&gt;There are multiple pre-built MEAN stacks/frameworks created:
* &lt;a href=&#34;http://mean.io/&#34;&gt;mean.io&lt;/a&gt;
* &lt;a href=&#34;http://meanjs.org/&#34;&gt;mean.js&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-notes:ff38e5c10e88715766a195f490595a14&#34;&gt;Further Notes&lt;/h2&gt;

&lt;p&gt;If you do not have any experience with any of the 4 technologies in MEAN, then take your time. Remember that these are 4 different technologies you are learning all at once. (The only advantage is, it&amp;rsquo;s using only one language, Javascript)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Mezzanine</title>
      <link>/resources/learn_mezzanine/</link>
      <pubDate>Tue, 16 Sep 2014 15:33:20 +0800</pubDate>
      
      <guid>/resources/learn_mezzanine/</guid>
      <description>

&lt;p&gt;This guide is for everyone who wants to learn &lt;a href=&#34;http://mezzanine.jupo.org/&#34;&gt;Mezzanine&lt;/a&gt;, a CMS &lt;a href=&#34;https://www.djangoproject.com&#34;&gt;Django&lt;/a&gt;-based framework. PostgreSQL is the suggested database management system in this guide. Moreover, this will include our recommended environment and links for the most reliable and best tutorials on web.&lt;/p&gt;

&lt;h2 id=&#34;linux:c58c5d450c1c816023b6fad9d466079c&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Supported Distributions&lt;/strong&gt;
1. Ubuntu (Precise Pangolin)
2. ElementaryOS (Luna)
3. Linux Mint (Cinnamon)&lt;/p&gt;

&lt;h3 id=&#34;dependencies:c58c5d450c1c816023b6fad9d466079c&#34;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;First, install all required dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
sudo apt-get install build-essential
sudo apt-get install python-pip python-dev python-setuptools
sudo apt-get install postgresql libpq-dev
sudo pip install virtualenv virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and append the following lines at the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Virtualenv
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Projects
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, restart the terminal and create your virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkvirtualenv sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your prompt should now look similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(sample)neil@andromeda:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-the-database:c58c5d450c1c816023b6fad9d466079c&#34;&gt;Setting up the database&lt;/h3&gt;

&lt;p&gt;First, create a custom user for your database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo -u postgres createuser --superuser $USER
$ sudo -u postgres psql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have entered the PostgreSQL REPL, setup the password for the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;postgres=# \password [enter your username here] #e.g. neil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exit the REPL by typing &lt;code&gt;\q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations, your machine [and you] is now ready to proceed to our suggested tutorials!&lt;/p&gt;

&lt;h3 id=&#34;tutorials:c58c5d450c1c816023b6fad9d466079c&#34;&gt;Tutorials&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you do not have any experience on python, we suggest to complete the curriculum in &lt;a href=&#34;http://www.codecademy.com/en/tracks/python&#34;&gt;Codecademy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Since &lt;strong&gt;Mezzanine&lt;/strong&gt; is based in &lt;strong&gt;Django&lt;/strong&gt;, it is strongly recommended for you to complete the &lt;a href=&#34;https://docs.djangoproject.com/en/1.7/intro/tutorial01&#34;&gt;first django web tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Being someone familiar with &lt;strong&gt;Django&lt;/strong&gt;, you can now check this &lt;strong&gt;Mezzanine&lt;/strong&gt; &lt;a href=&#34;http://rodmtech.net/docs/mezzanine/a-mezzanine-tutorial-take-2&#34;&gt;tutorial&lt;/a&gt;. Note that this is an outdated tutorial so it is inevitable for you to encounter errors. Still, this guide can help you grasp the power of this CMS Framework.&lt;/li&gt;
&lt;li&gt;Assuming that you have completed the above tutorial in spite of all the errors, we are now sure that the documentation of &lt;strong&gt;Mezzanine&lt;/strong&gt; will finally have some sense to you. Congrats!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-notes:c58c5d450c1c816023b6fad9d466079c&#34;&gt;Further Notes&lt;/h3&gt;

&lt;p&gt;For a high quality and readable codebase, please make these conventions as references:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://legacy.python.org/dev/peps/pep-0008&#34;&gt;Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style&#34;&gt;Django Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Android Development Environment</title>
      <link>/resources/android_dev/</link>
      <pubDate>Tue, 12 Aug 2014 16:55:20 +0800</pubDate>
      
      <guid>/resources/android_dev/</guid>
      <description>

&lt;p&gt;Set-up your android development environment&lt;/p&gt;

&lt;h2 id=&#34;linux:9f5df4195855c3793cf9110b129c124e&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Supported Distributions&lt;/strong&gt;
1. Ubuntu (Precise Pangolin)
2. ElementaryOS (Luna)
3. Linux Mint (Cinnamon)&lt;/p&gt;

&lt;h3 id=&#34;android-studio:9f5df4195855c3793cf9110b129c124e&#34;&gt;Android Studio&lt;/h3&gt;

&lt;p&gt;First, add a new PPA in order for us to install Oracle&amp;rsquo;s official SDK.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
sudo apt-get install oracle-java7-installer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, download &lt;a href=&#34;http://developer.android.com/sdk/installing/studio.html&#34;&gt;Android Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, unpack the downloaded file and move it to your desired directory. In our case, we will put it in the &lt;code&gt;/opt/&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mv android-studio /opt/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;code&gt;.bashrc&lt;/code&gt; and add the line below so we can run Android Studio from any directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano ~/.bashrc #open .bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Android Studio
## Add this line at the end of .bashrc
export PATH=&amp;quot;/opt/android-studio/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the changed file.&lt;/p&gt;

&lt;p&gt;Restart your terminal.&lt;/p&gt;

&lt;p&gt;You can now run Android Studio via this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;studio.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Click the &lt;code&gt;check for updates&lt;/code&gt; link from the window. Congratulations, you have finished installing Android Studio!&lt;/p&gt;

&lt;h3 id=&#34;proxy-settings:9f5df4195855c3793cf9110b129c124e&#34;&gt;Proxy Settings&lt;/h3&gt;

&lt;p&gt;If you are experiencing some connection issue and you are behind a proxy, do the following:&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;Android Studio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;Configure &amp;gt; Settings&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Search for &lt;strong&gt;Gradle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Enter the following as &lt;em&gt;Gradle VM Options&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-Dhttp.proxyHost=proxy.domain.com -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy.domain.com -Dhttps.proxyPort=8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the proxy needs authentication, just add this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-Dhttp.proxyUser=&amp;lt;username&amp;gt; -Dhttp.proxyPassword=&amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Change the proxy host, port, user, and password according to your own proxy settings.&lt;/p&gt;

&lt;p&gt;Apply and save the changes.&lt;/p&gt;

&lt;p&gt;Next, Go to &lt;em&gt;Configure &amp;gt; Plugins&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Browse Repositories&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the new window, click &lt;em&gt;Http Proxy Settings&lt;/em&gt; and configure it.&lt;/p&gt;

&lt;p&gt;Finally, you should be able to update your &lt;strong&gt;Android Studio&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;genymotion:9f5df4195855c3793cf9110b129c124e&#34;&gt;Genymotion&lt;/h3&gt;

&lt;p&gt;Install &lt;strong&gt;Oracle&amp;rsquo;s Virtualbox&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install virtualbox-qt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, go to &lt;a href=&#34;http://www.genymotion.com&#34;&gt;Genymotion&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;Then, sign up for an account.&lt;/p&gt;

&lt;p&gt;After that, download Genymotion &lt;a href=&#34;https://cloud.genymotion.com/page/launchpad/download/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Move the downloaded file to &lt;code&gt;/opt/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Downloads/
sudo mv genymotion-2.2.2_x64.bin /opt/ #version may vary from time to time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;code&gt;/opt/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the file executable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod +x genymotion-2.2.2_x64.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute the installer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ./genymotion-2.2.2_x64.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the same page, install the Genymotion plug-in into our Android Studio. Check the &lt;strong&gt;Download IntelliJ IDEA Plugin&lt;/strong&gt; section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build your own LNPP Stack</title>
      <link>/resources/build_lnpp_stack/</link>
      <pubDate>Wed, 16 Jul 2014 20:08:20 +0800</pubDate>
      
      <guid>/resources/build_lnpp_stack/</guid>
      <description>

&lt;p&gt;Set-up an &lt;strong&gt;nginx&lt;/strong&gt;, &lt;strong&gt;php&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt;, and &lt;strong&gt;phppgadmin&lt;/strong&gt; development environment in your Linux machine.&lt;/p&gt;

&lt;h2 id=&#34;linux:e015295be2249bad12948027ea58e47d&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Supported Distributions&lt;/strong&gt;
1. Ubuntu (Precise Pangolin)
2. ElementaryOS (Luna)
3. Linux Mint (Cinnamon)&lt;/p&gt;

&lt;h3 id=&#34;update-your-system:e015295be2249bad12948027ea58e47d&#34;&gt;Update your system&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-nginx:e015295be2249bad12948027ea58e47d&#34;&gt;Installing nginx&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-php:e015295be2249bad12948027ea58e47d&#34;&gt;Installing php&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install php5 php5-common php5-fpm php5-cli php5-mcrypt php5-pgsql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You might encounter a bug in Ubuntu 14.10 about the icedtea-7-plugin. If you receive such an error, you can use this workaround:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -sv /usr/lib/jvm/java-7-openjdk-amd64 /usr/lib/jvm/java-8-openjdk-amd64
sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-postgres:e015295be2249bad12948027ea58e47d&#34;&gt;Installing postgres&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install python-software-properties
sudo apt-get install postgresql
sudo apt-get install libpq-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-up-postgres:e015295be2249bad12948027ea58e47d&#34;&gt;Set-up postgres&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -u postgres createuser --superuser $USER
sudo -u postgres psql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you entered the &lt;code&gt;postgresql REPL&lt;/code&gt;, setup the password for the user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;postgres=# \password [enter your username here] #e.g. neil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you exit the REPL, create a database for the created user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;createdb $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you can now create a database using this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;createdb my_database #change &#39;my_database&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-phppgadmin:e015295be2249bad12948027ea58e47d&#34;&gt;Installing phppgadmin&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install phppgadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Version 5.1-1 is dependent on libapache2-mod-php5 and apache2. To install phppgadmin without installing the apache dependencies, you would have to manually download the compressed folder from &lt;a href=&#34;phppgadmin.sourceforge.net/doku.php?id=download&#34;&gt;sourceforge&lt;/a&gt; and extract to &lt;code&gt;/usr/share&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-virtual-host-for-phppgadmin:e015295be2249bad12948027ea58e47d&#34;&gt;Creating a virtual host for phppgadmin&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;/etc/nginx/sites-available/app.phppgadmin.dev&lt;/code&gt; which should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {
  listen 80;

  root /usr/share/phppgadmin; # if you downloaded phppgadmin manually, rename this to the name of the extracted folder

  index index.php;

  #You can change this depending on your wanted url
  #In case you change this one, rename this file also.
  server_name app.phppgadmin.dev;

  access_log  /var/log/app.phppgadmin.dev.access.log;

  error_log   /var/log/app.phppgadmin.dev.error.log;

  location / {
    allow all;
  }

  location ~ \.php$ {
    include phpfpm_params;
    allow all;
  }

  location ~ /\.ht {
    deny all;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create &lt;code&gt;/etc/nginx/phpfpm_params&lt;/code&gt; which should contain these configurations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastcgi_split_path_info      ^(.+\.php)(.*)$;
fastcgi_pass                 unix:/var/run/php5-fpm.sock;
fastcgi_index                index.php;
fastcgi_param                SCRIPT_FILENAME  $document_root$fastcgi_script_name;
include fastcgi_params;
fastcgi_param                QUERY_STRING $query_string;
fastcgi_param                REQUEST_METHOD $request_method;
fastcgi_param                CONTENT_TYPE $content_type;
fastcgi_param                CONTENT_LENGTH $content_length;
fastcgi_intercept_errors     on;
fastcgi_ignore_client_abort  off;
fastcgi_connect_timeout      60;
fastcgi_send_timeout         180;
fastcgi_read_timeout         180;
fastcgi_buffer_size          128k;
fastcgi_buffers              4  256k;
fastcgi_busy_buffers_size    256k;
fastcgi_temp_file_write_size 256k;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a symlink to the &lt;code&gt;sites-enabled&lt;/code&gt; directory to activate the new virtual host.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /etc/nginx/sites-available/app.phppgadmin.dev /etc/nginx/sites-enabled/app.phppgadmin.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, edit &lt;code&gt;/etc/hosts&lt;/code&gt; and add your newly created virtual host.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;127.0.0.1 localhost
127.0.0.1 app.phppgadmin.dev #this is the added line

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;further-notes:e015295be2249bad12948027ea58e47d&#34;&gt;Further Notes&lt;/h3&gt;

&lt;p&gt;For more info about creating a virtual host for nginx, see &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-laravel-with-nginx-on-an-ubuntu-12-04-lts-vps&#34;&gt;Digital Ocean&amp;rsquo;s guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We used this &lt;a href=&#34;https://xdev.me/article/Install_phpPgAdmin_on_Ubuntu&#34;&gt;resource&lt;/a&gt; for the installation and set-up of phppgadmin. We added more modifications as a fix for some encountered errors.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>